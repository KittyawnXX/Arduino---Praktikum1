#include <LiquidCrystal.h>

// Pin Definitions
const int button1Pin = 2;
const int button2Pin = 3;
const int button3Pin = 4;
const int lamp1Pin = 11;
const int lamp2Pin = 12;

// Global Variables
int status = 0;
int lastButton1State = HIGH; // State of button 1 in the previous loop
int button1State;            // Current state of button 1
bool lampActive = false;     // To prevent repetitive lamp activation
unsigned long statusTime = 0; // To track time when status is 3
bool statusResetPending = false; // To track if reset is pending
bool loopActive = false;     // To track if the loop cycle is active
unsigned long loopStartTime = 0; // To track the start time of the loop cycle
int loopStep = 0;            // To track the current step in the loop cycle
int lastButton2State = HIGH; // Previous state of button 2
bool button1Active = false;  // Interlock for Button1
bool button2Active = false;  // Interlock for Button2

// LCD setup (RS, E, D4, D5, D6, D7)
LiquidCrystal lcd(7, 8, 9, 10, A0, A1);

void setup() {
  // Initialize pins with internal pull-up resistors
  pinMode(button1Pin, INPUT_PULLUP); // Aktifkan pull-up internal untuk PushButton1
  pinMode(button2Pin, INPUT_PULLUP); // Aktifkan pull-up internal untuk PushButton2
  pinMode(button3Pin, INPUT_PULLUP); // Aktifkan pull-up internal untuk PushButton3
  pinMode(lamp1Pin, OUTPUT);
  pinMode(lamp2Pin, OUTPUT);
  
  // Initialize lamps off
  digitalWrite(lamp1Pin, LOW);
  digitalWrite(lamp2Pin, LOW);

  // Initialize LCD
  lcd.begin(16, 2);
  lcd.setCursor(0, 0);
  lcd.print("STATUS: 0");
}

void loop() {
  // Read the current state of button 1
  button1State = digitalRead(button1Pin);
  
  // Check if the button state has changed from HIGH to LOW for Button 1
  if (button1State == LOW && lastButton1State == HIGH && !button2Active) { // Button pressed, and Button2 is not active
    button1Active = true;  // Set Button1 active
    status++;
    lampActive = false;  // Reset lamp activity when status changes
    if (status == 3) {
      // Start timing for automatic reset
      statusResetPending = true;
      statusTime = millis(); // Capture current time
    }
    // Display current STATUS
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("STATUS: ");
    lcd.print(status);
  }

  // Update lastButton1State to the current state
  lastButton1State = button1State;

  // Check if automatic reset is pending and 5 seconds have passed
  if (statusResetPending && (millis() - statusTime >= 5000)) {
    // Perform the reset
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Resetting Status...");
    delay(3000); // Display reset message for 3 seconds
    status = 0;
    statusResetPending = false; // Reset the pending flag
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("STATUS: ");
    lcd.print(status);
  }

  // Lamp control based on STATUS, ensuring each action happens only once
  if (!lampActive && !button2Active) { // Ensure lamps are controlled only when button2 is not active
    if (status == 1) {
      digitalWrite(lamp1Pin, HIGH);
      delay(3000);
      digitalWrite(lamp1Pin, LOW);
      lampActive = true; // Mark as completed
    } 
    else if (status == 2) {
      digitalWrite(lamp2Pin, HIGH);
      delay(3000);
      digitalWrite(lamp2Pin, LOW);
      lampActive = true; // Mark as completed
    } 
    else if (status == 3) {
      digitalWrite(lamp1Pin, HIGH);
      digitalWrite(lamp2Pin, HIGH);
      delay(3000);
      digitalWrite(lamp1Pin, LOW);
      digitalWrite(lamp2Pin, LOW);
      lampActive = true; // Mark as completed
    }
  }

  // Read the current state of button 2
  int button2State = digitalRead(button2Pin);

  // Check if the button state has changed from HIGH to LOW for Button 2
  if (button2State == LOW && lastButton2State == HIGH && !loopActive && !button1Active) {
    if (status == 0) { // Only allow button2 action if status is 0
      // Start loop cycle
      button2Active = true; // Set Button2 active
      loopActive = true;
      loopStartTime = millis(); // Capture the start time of the loop
      loopStep = 0; // Start with the first step
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Looping...");
    } else {
      // If status is not 0, display warning message
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("STATUS RESET");
      lcd.setCursor(0, 1);
      lcd.print("NEEDED!");
      delay(3000); // Display message for 3 seconds
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("STATUS: ");
      lcd.print(status);
    }
  } 
  else if (button2State == LOW && lastButton2State == HIGH && loopActive) { 
    // Stop loop cycle if button is pressed and loop is active
    loopActive = false;
    button2Active = false; // Set Button2 inactive
    digitalWrite(lamp1Pin, LOW);
    digitalWrite(lamp2Pin, LOW);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("STATUS: ");
    lcd.print(status);
  }

  // Handle the looping of lamps
  if (loopActive) {
    unsigned long currentTime = millis();
    if (currentTime - loopStartTime >= 3000) { // Check if 3 seconds have passed
      loopStartTime = currentTime; // Reset the start time
      if (loopStep == 0) {
        digitalWrite(lamp1Pin, HIGH);
        digitalWrite(lamp2Pin, LOW);
        loopStep = 1;
      } 
      else if (loopStep == 1) {
        digitalWrite(lamp1Pin, LOW);
        digitalWrite(lamp2Pin, HIGH);
        loopStep = 2;
      } 
      else if (loopStep == 2) {
        digitalWrite(lamp1Pin, HIGH);
        digitalWrite(lamp2Pin, HIGH);
        loopStep = 0;
      }
    }
  }

  // Update lastButton2State to the current state
  lastButton2State = button2State;

  // Handle reset via PushButton3
  int button3State = digitalRead(button3Pin);
  if (button3State == LOW) { // Check if button3 is pressed
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Resetting Status");
    delay(3000); // Display reset message for 3 seconds
    status = 0; // Reset status
    button1Active = false; // Reset interlock for button1
    button2Active = false; // Reset interlock for button2
    loopActive = false; // Stop loop if it was running
    digitalWrite(lamp1Pin, LOW);
    digitalWrite(lamp2Pin, LOW);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("STATUS: ");
    lcd.print(status);
  }

  // Small delay to avoid bouncing issues
  delay(50);
}
